name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # ---- Build and Dockerize Job ----
  build-and-dockerize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build and compile
        run: mvn clean compile --no-transfer-progress -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker image with Jib
        run: mvn jib:build
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  # ---- Deploy Job ----
  deploy-to-elastic-beanstalk:
    name: Deploy to Elastic Beanstalk
    needs: build-and-dockerize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Wait for Elastic Beanstalk Environment to Be Ready
        run: |
          echo "Waiting for Elastic Beanstalk environment to be in 'Ready' state..."
          for i in {1..30}; do
            STATUS=$(aws elasticbeanstalk describe-environments \
              --application-name "${{ secrets.EB_APP_NAME }}" \
              --environment-name "${{ secrets.EB_ENV_NAME }}" \
              --region "${{ secrets.AWS_REGION }}" \
              --query "Environments[0].Status" --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" == "Ready" ]; then
              echo "Environment is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Environment did not become ready within the timeout period."
              exit 1
            fi
            sleep 60
          done

      - name: Generate Version Label
        id: version
        run: echo "VERSION_LABEL=build-${{ github.run_number }}-${{ github.run_id }}-${{ github.sha }}" >> $GITHUB_ENV

      - name: Check if Version Exists
        id: check_version
        run: |
          VERSION_LABEL=${{ env.VERSION_LABEL }}
          VERSION_EXISTS=$(aws elasticbeanstalk describe-application-versions --application-name "${{ secrets.EB_APP_NAME }}" --version-labels "$VERSION_LABEL" --query "ApplicationVersions[?VersionLabel=='$VERSION_LABEL'].VersionLabel" --output text)
          echo "VERSION_EXISTS=${VERSION_EXISTS}" >> $GITHUB_ENV

      - name: Deploy to Elastic Beanstalk
        if: env.VERSION_EXISTS != env.VERSION_LABEL
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME }}
          environment_name: ${{ secrets.EB_ENV_NAME }}
          version_label: "${{ env.VERSION_LABEL }}"
          region: ${{ secrets.AWS_REGION }}
          deployment_package: Dockerrun.aws.json

